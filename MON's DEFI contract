// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.8.0;
pragma experimental ABIEncoderV2;
import "./SafeERC20.sol";

library OwnerArrays {
    struct Set {
        bytes32[] _values;
        mapping (bytes32 => uint256) _indexes;
    }
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        uint256 valueIndex = set._indexes[value];
        if (valueIndex != 0) { // Equivalent to contains(set, value)
            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;
            bytes32 lastvalue = set._values[lastIndex];
            set._values[toDeleteIndex] = lastvalue;
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based
            set._values.pop();
            delete set._indexes[value];
            return true;
        } else {
            return false;
        }
    }

    function _contains(Set storage set, bytes32 value) private view returns (bool) {return set._indexes[value] != 0;}
    function _length(Set storage set) private view returns (uint256) {return set._values.length;}
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }
    struct AddressSet {Set _inner;}
    function add(AddressSet storage set, address value) internal returns (bool) {return _add(set._inner, bytes32(uint256(value)));}
    function remove(AddressSet storage set, address value) internal returns (bool) {return _remove(set._inner, bytes32(uint256(value)));}
    function contains(AddressSet storage set, address value) internal view returns (bool) {return _contains(set._inner, bytes32(uint256(value)));}
    function length(AddressSet storage set) internal view returns (uint256) {return _length(set._inner);}function at(AddressSet storage set, uint256 index) internal view returns (address) {return address(uint256(_at(set._inner, index)));}
    struct UintSet {Set _inner;}
    function add(UintSet storage set, uint256 value) internal returns (bool) {return _add(set._inner, bytes32(value));}
    function remove(UintSet storage set, uint256 value) internal returns (bool) {return _remove(set._inner, bytes32(value));}
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {return _contains(set._inner, bytes32(value));}
    function length(UintSet storage set) internal view returns (uint256) {return _length(set._inner);}
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {return uint256(_at(set._inner, index));}
}


contract MonDefiContract{
    using SafeMath for uint256;
    using OwnerArrays for OwnerArrays.UintSet;
    int8 isInit ;
    address public owner;
    address public manager_adrA;
    address public manager_adrB;
    
    string public _name;
    string public _symbol;
    uint8 public _decimals;
    uint256 public _totalSupply;
    uint256 private prefix;
    
    IERC20 public monToken; // MON TOKEN!
    
    string private baseImageUrl;
    string private baseMeta;
    struct EaDefi_Card {
        address User_Address;           // wallet address of who staking
        uint256 KMON_ID;                // Token id of NFT of KMON
        uint256 StakingIN_Amount;       // Amouot of coin will stking with NFT coin.
        uint256 MONAmount;              // Amount of coin will be given to the address
        uint256 cont_date;              // timestamp of staking time
        string conditions;              // if this yes, this is not going to give back the coin.
        IERC20 lpToken;
    }
    
    mapping (uint256 => address) private _tokenOwner;
    mapping(address => mapping(bytes32 => string)) user_dataList;
    mapping (address => OwnerArrays.UintSet) private _holderTokens;
    mapping (address => uint256) private _balances;
    EaDefi_Card[] public defi_Infos;
    
    constructor() payable {
        address adr = 0x2b409b6E6A8b926F4c9F6c31B240313019745fb8;
        monToken = IERC20(adr);
        _name ="MON DEFI";
        _symbol ="MDFY";
        _decimals =0;
        _totalSupply = 0;
        owner = msg.sender; 
    }
    
    
    
    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    function cont_BalGet()  public view returns (uint256) {
         uint256 contBal = monToken.balanceOf(address(this));
         return contBal;
    }
    function isOwerManager()  public view returns (uint8) {
         if( owner == msg.sender ) return 1;
         if( manager_adrA == msg.sender || manager_adrB == msg.sender) return 2;
         return 0;
    }
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
    
    function mintContract(address account,  uint256 KMON_ID , uint256 StakingIN_Amount,uint256 MONAmount, IERC20 _lpToken,string memory conditions) public {
        require(owner == msg.sender || manager_adrA == msg.sender || manager_adrB == msg.sender  ,"Admin only funtion" );
        uint256 contBal = monToken.balanceOf(address(this));
        require(contBal >= MONAmount , "Not enough Balace in the contract" );
        uint256 ContID = _totalSupply; // Unique card ID
        EaDefi_Card memory taea = EaDefi_Card(account, KMON_ID, StakingIN_Amount,MONAmount, block.timestamp,conditions,_lpToken );
         defi_Infos.push(taea);
        _holderTokens[account].add(ContID);
        uint8 amt = 1;
        _balances[account] = _balances[account].add(amt);
        _tokenOwner[ContID] = account;
        emit Transfer(address(0), account, amt);
        _totalSupply++;
        monToken.transfer(account, MONAmount);
        emit Deposit(account, ContID,StakingIN_Amount );
    }
    
    function _removeContract(uint256 tokenId, address coinowner) internal {
        EaDefi_Card memory ea = defi_Infos[tokenId];
        _tokenOwner[tokenId] = address(0);
        _holderTokens[coinowner].remove(tokenId);
        uint8 amtout = 1;
        _balances[coinowner] = _balances[coinowner].sub(amtout);
        ea.lpToken.transfer(address(ea.User_Address), ea.StakingIN_Amount);
        emit Transfer( coinowner,address(0), amtout);
        emit Withdraw(coinowner, tokenId,amtout );
    }
    
    function removeContract(uint256 tokenId, address account) public {
        require(owner == msg.sender || manager_adrA == msg.sender || manager_adrB == msg.sender ,"Admin only funtion" );
        require(_tokenOwner[tokenId] == account ,"The owner of this contract is not the address");
        require(tokenId < defi_Infos.length && tokenId >= 0  ,"Index out of range");
        EaDefi_Card memory ea = defi_Infos[tokenId];
        require(ea.User_Address == account ,"This contract is not belong to its address");
        _removeContract(tokenId,account);
    }
    
    
    function DefieCountGet() public view returns (uint256) {
        return defi_Infos.length;
    }
    
    function DefibalanceOf(address coinowner) public view returns (uint256) {
        require(coinowner != address(0), "ERC721: balance query for the zero address");
        return _holderTokens[coinowner].length();
    }
    
    function getContractInfo( uint256 tokenId) public view returns (
        address User_Address, uint256 KMON_ID , uint256 LMCHAmount,uint256 MONAmount,uint256 cont_date,string memory has_refund, IERC20 contaddress){
        EaDefi_Card memory ea = defi_Infos[tokenId];
        return (ea.User_Address, ea.KMON_ID, ea.StakingIN_Amount, ea.MONAmount, ea.cont_date, ea.conditions, ea.lpToken);
    }
    
    
    function getOwner() public view returns (address) {return (owner);}
    function getManager() public view returns (address,address) {return (manager_adrA,manager_adrB);}
    function totalSupply() public view returns (uint256) {return _totalSupply;}
    function name() public view returns (string memory) {return _name;}
    function symbol() public view returns (string memory) {return _symbol;}
    
    function balanceByAddressAll(address holder) public view returns (string memory) {
        require(holder != address(0), "ERC721: balance query for the zero address");
        uint256 ns = _holderTokens[holder].length();
        string memory _a1 = '[';
        for(uint8 i = 0; i < ns; i++ ){
            uint256 ea = _holderTokens[holder].at(i);
            string memory No = uint2str(ea);
            if( i > 0 ) _a1 = concatStrng(_a1, ',');
            _a1 = concatStrng(_a1, No);
            
        }
        _a1 = concatStrng(_a1, ']');
        return _a1;
    }
    
    
    
    function _set_manager(address account ,uint8 whichone)internal{
        if( whichone==1) manager_adrA = account;
        if( whichone==2) manager_adrB = account;
    }
    function set_manager(address account,uint8 whichone ) public{
        require(owner == msg.sender);
        require(account != address(0), "ERC721: Cannot set manager to the zero address");
        _set_manager(account, whichone);
    }
    
    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
        if (_i == 0) {return "0";}
        uint j = _i; uint len;
        while (j != 0) {len++;j /= 10;}
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (_i != 0) {bstr[k--] = byte(uint8(48 + _i % 10));_i /= 10;}
        return string(bstr);
    }
    function concatStrng(string memory _a, string memory _b) internal pure returns (string memory){
        bytes memory bytes_a = bytes(_a);
        bytes memory bytes_b = bytes(_b);
        string memory length_ab = new string(bytes_a.length + bytes_b.length);
        bytes memory bytes_c = bytes(length_ab);
        uint k = 0;
        for (uint256 i = 0; i < bytes_a.length; i++) bytes_c[k++] = bytes_a[i];
        for (uint256 i = 0; i < bytes_b.length; i++) bytes_c[k++] = bytes_b[i];
        return string(bytes_c);
    }
    
}
